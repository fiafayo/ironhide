<?php

/**
 * Base class that represents a row from the 'tk_mhs' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 17 01:36:53 2013
 *
 * @package    lib.model.perwalian_ft.om
 */
abstract class BaseMahasiswa extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MahasiswaPeer
	 */
	protected static $peer;

	/**
	 * The value for the nrp field.
	 * @var        string
	 */
	protected $nrp;

	/**
	 * The value for the sksmax field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $sksmax;

	/**
	 * The value for the ips field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $ips;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the jurusan field.
	 * @var        string
	 */
	protected $jurusan;

	/**
	 * The value for the nama field.
	 * @var        string
	 */
	protected $nama;

	/**
	 * The value for the alamat field.
	 * @var        string
	 */
	protected $alamat;

	/**
	 * The value for the tgllahir field.
	 * @var        string
	 */
	protected $tgllahir;

	/**
	 * The value for the tmplahir field.
	 * @var        string
	 */
	protected $tmplahir;

	/**
	 * The value for the totbss field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $totbss;

	/**
	 * The value for the ipk field.
	 * Note: this column has a database default value of: 0
	 * @var        double
	 */
	protected $ipk;

	/**
	 * The value for the skskum field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $skskum;

	/**
	 * The value for the telepon field.
	 * @var        string
	 */
	protected $telepon;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the angkatan field.
	 * @var        string
	 */
	protected $angkatan;

	/**
	 * The value for the namasma field.
	 * @var        string
	 */
	protected $namasma;

	/**
	 * The value for the namaortu field.
	 * @var        string
	 */
	protected $namaortu;

	/**
	 * The value for the kelamin field.
	 * @var        string
	 */
	protected $kelamin;

	/**
	 * The value for the asisten field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $asisten;

	/**
	 * The value for the konsultasi field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $konsultasi;

	/**
	 * The value for the aa field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $aa;

	/**
	 * @var        array DaftarKelas[] Collection to store aggregation of DaftarKelas objects.
	 */
	protected $collDaftarKelass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDaftarKelass.
	 */
	private $lastDaftarKelasCriteria = null;

	/**
	 * @var        LulusToefl one-to-one related LulusToefl object
	 */
	protected $singleLulusToefl;

	/**
	 * @var        array TambahSKS[] Collection to store aggregation of TambahSKS objects.
	 */
	protected $collTambahSKSs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTambahSKSs.
	 */
	private $lastTambahSKSCriteria = null;

	/**
	 * @var        array Transkrip[] Collection to store aggregation of Transkrip objects.
	 */
	protected $collTranskrips;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTranskrips.
	 */
	private $lastTranskripCriteria = null;

	/**
	 * @var        array TranskripAsli[] Collection to store aggregation of TranskripAsli objects.
	 */
	protected $collTranskripAslis;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTranskripAslis.
	 */
	private $lastTranskripAsliCriteria = null;

	/**
	 * @var        array MinatMataKuliah[] Collection to store aggregation of MinatMataKuliah objects.
	 */
	protected $collMinatMataKuliahs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMinatMataKuliahs.
	 */
	private $lastMinatMataKuliahCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'MahasiswaPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->sksmax = 0;
		$this->ips = 0;
		$this->totbss = 0;
		$this->ipk = 0;
		$this->skskum = 0;
		$this->asisten = false;
		$this->konsultasi = false;
		$this->aa = false;
	}

	/**
	 * Initializes internal state of BaseMahasiswa object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [nrp] column value.
	 * 
	 * @return     string
	 */
	public function getNrp()
	{
		return $this->nrp;
	}

	/**
	 * Get the [sksmax] column value.
	 * 
	 * @return     int
	 */
	public function getSksmax()
	{
		return $this->sksmax;
	}

	/**
	 * Get the [ips] column value.
	 * 
	 * @return     double
	 */
	public function getIps()
	{
		return $this->ips;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [jurusan] column value.
	 * 
	 * @return     string
	 */
	public function getJurusan()
	{
		return $this->jurusan;
	}

	/**
	 * Get the [nama] column value.
	 * 
	 * @return     string
	 */
	public function getNama()
	{
		return $this->nama;
	}

	/**
	 * Get the [alamat] column value.
	 * 
	 * @return     string
	 */
	public function getAlamat()
	{
		return $this->alamat;
	}

	/**
	 * Get the [optionally formatted] temporal [tgllahir] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getTgllahir($format = 'Y-m-d')
	{
		if ($this->tgllahir === null) {
			return null;
		}


		if ($this->tgllahir === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->tgllahir);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->tgllahir, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [tmplahir] column value.
	 * 
	 * @return     string
	 */
	public function getTmplahir()
	{
		return $this->tmplahir;
	}

	/**
	 * Get the [totbss] column value.
	 * 
	 * @return     int
	 */
	public function getTotbss()
	{
		return $this->totbss;
	}

	/**
	 * Get the [ipk] column value.
	 * 
	 * @return     double
	 */
	public function getIpk()
	{
		return $this->ipk;
	}

	/**
	 * Get the [skskum] column value.
	 * 
	 * @return     int
	 */
	public function getSkskum()
	{
		return $this->skskum;
	}

	/**
	 * Get the [telepon] column value.
	 * 
	 * @return     string
	 */
	public function getTelepon()
	{
		return $this->telepon;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [angkatan] column value.
	 * 
	 * @return     string
	 */
	public function getAngkatan()
	{
		return $this->angkatan;
	}

	/**
	 * Get the [namasma] column value.
	 * 
	 * @return     string
	 */
	public function getNamasma()
	{
		return $this->namasma;
	}

	/**
	 * Get the [namaortu] column value.
	 * 
	 * @return     string
	 */
	public function getNamaortu()
	{
		return $this->namaortu;
	}

	/**
	 * Get the [kelamin] column value.
	 * 
	 * @return     string
	 */
	public function getKelamin()
	{
		return $this->kelamin;
	}

	/**
	 * Get the [asisten] column value.
	 * 
	 * @return     boolean
	 */
	public function getAsisten()
	{
		return $this->asisten;
	}

	/**
	 * Get the [konsultasi] column value.
	 * 
	 * @return     boolean
	 */
	public function getKonsultasi()
	{
		return $this->konsultasi;
	}

	/**
	 * Get the [aa] column value.
	 * 
	 * @return     boolean
	 */
	public function getAa()
	{
		return $this->aa;
	}

	/**
	 * Set the value of [nrp] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setNrp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nrp !== $v) {
			$this->nrp = $v;
			$this->modifiedColumns[] = MahasiswaPeer::NRP;
		}

		return $this;
	} // setNrp()

	/**
	 * Set the value of [sksmax] column.
	 * 
	 * @param      int $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setSksmax($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sksmax !== $v || $this->isNew()) {
			$this->sksmax = $v;
			$this->modifiedColumns[] = MahasiswaPeer::SKSMAX;
		}

		return $this;
	} // setSksmax()

	/**
	 * Set the value of [ips] column.
	 * 
	 * @param      double $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setIps($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->ips !== $v || $this->isNew()) {
			$this->ips = $v;
			$this->modifiedColumns[] = MahasiswaPeer::IPS;
		}

		return $this;
	} // setIps()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = MahasiswaPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [jurusan] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setJurusan($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->jurusan !== $v) {
			$this->jurusan = $v;
			$this->modifiedColumns[] = MahasiswaPeer::JURUSAN;
		}

		return $this;
	} // setJurusan()

	/**
	 * Set the value of [nama] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setNama($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nama !== $v) {
			$this->nama = $v;
			$this->modifiedColumns[] = MahasiswaPeer::NAMA;
		}

		return $this;
	} // setNama()

	/**
	 * Set the value of [alamat] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setAlamat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alamat !== $v) {
			$this->alamat = $v;
			$this->modifiedColumns[] = MahasiswaPeer::ALAMAT;
		}

		return $this;
	} // setAlamat()

	/**
	 * Sets the value of [tgllahir] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setTgllahir($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->tgllahir !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->tgllahir !== null && $tmpDt = new DateTime($this->tgllahir)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->tgllahir = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MahasiswaPeer::TGLLAHIR;
			}
		} // if either are not null

		return $this;
	} // setTgllahir()

	/**
	 * Set the value of [tmplahir] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setTmplahir($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tmplahir !== $v) {
			$this->tmplahir = $v;
			$this->modifiedColumns[] = MahasiswaPeer::TMPLAHIR;
		}

		return $this;
	} // setTmplahir()

	/**
	 * Set the value of [totbss] column.
	 * 
	 * @param      int $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setTotbss($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->totbss !== $v || $this->isNew()) {
			$this->totbss = $v;
			$this->modifiedColumns[] = MahasiswaPeer::TOTBSS;
		}

		return $this;
	} // setTotbss()

	/**
	 * Set the value of [ipk] column.
	 * 
	 * @param      double $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setIpk($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->ipk !== $v || $this->isNew()) {
			$this->ipk = $v;
			$this->modifiedColumns[] = MahasiswaPeer::IPK;
		}

		return $this;
	} // setIpk()

	/**
	 * Set the value of [skskum] column.
	 * 
	 * @param      int $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setSkskum($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->skskum !== $v || $this->isNew()) {
			$this->skskum = $v;
			$this->modifiedColumns[] = MahasiswaPeer::SKSKUM;
		}

		return $this;
	} // setSkskum()

	/**
	 * Set the value of [telepon] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setTelepon($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telepon !== $v) {
			$this->telepon = $v;
			$this->modifiedColumns[] = MahasiswaPeer::TELEPON;
		}

		return $this;
	} // setTelepon()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = MahasiswaPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [angkatan] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setAngkatan($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->angkatan !== $v) {
			$this->angkatan = $v;
			$this->modifiedColumns[] = MahasiswaPeer::ANGKATAN;
		}

		return $this;
	} // setAngkatan()

	/**
	 * Set the value of [namasma] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setNamasma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->namasma !== $v) {
			$this->namasma = $v;
			$this->modifiedColumns[] = MahasiswaPeer::NAMASMA;
		}

		return $this;
	} // setNamasma()

	/**
	 * Set the value of [namaortu] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setNamaortu($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->namaortu !== $v) {
			$this->namaortu = $v;
			$this->modifiedColumns[] = MahasiswaPeer::NAMAORTU;
		}

		return $this;
	} // setNamaortu()

	/**
	 * Set the value of [kelamin] column.
	 * 
	 * @param      string $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setKelamin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kelamin !== $v) {
			$this->kelamin = $v;
			$this->modifiedColumns[] = MahasiswaPeer::KELAMIN;
		}

		return $this;
	} // setKelamin()

	/**
	 * Set the value of [asisten] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setAsisten($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->asisten !== $v || $this->isNew()) {
			$this->asisten = $v;
			$this->modifiedColumns[] = MahasiswaPeer::ASISTEN;
		}

		return $this;
	} // setAsisten()

	/**
	 * Set the value of [konsultasi] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setKonsultasi($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->konsultasi !== $v || $this->isNew()) {
			$this->konsultasi = $v;
			$this->modifiedColumns[] = MahasiswaPeer::KONSULTASI;
		}

		return $this;
	} // setKonsultasi()

	/**
	 * Set the value of [aa] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Mahasiswa The current object (for fluent API support)
	 */
	public function setAa($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->aa !== $v || $this->isNew()) {
			$this->aa = $v;
			$this->modifiedColumns[] = MahasiswaPeer::AA;
		}

		return $this;
	} // setAa()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->sksmax !== 0) {
				return false;
			}

			if ($this->ips !== 0) {
				return false;
			}

			if ($this->totbss !== 0) {
				return false;
			}

			if ($this->ipk !== 0) {
				return false;
			}

			if ($this->skskum !== 0) {
				return false;
			}

			if ($this->asisten !== false) {
				return false;
			}

			if ($this->konsultasi !== false) {
				return false;
			}

			if ($this->aa !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->nrp = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->sksmax = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->ips = ($row[$startcol + 2] !== null) ? (double) $row[$startcol + 2] : null;
			$this->status = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->jurusan = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->nama = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->alamat = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->tgllahir = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->tmplahir = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->totbss = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->ipk = ($row[$startcol + 10] !== null) ? (double) $row[$startcol + 10] : null;
			$this->skskum = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->telepon = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->password = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->angkatan = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->namasma = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->namaortu = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->kelamin = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->asisten = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->konsultasi = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->aa = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 21; // 21 = MahasiswaPeer::NUM_COLUMNS - MahasiswaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Mahasiswa object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MahasiswaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MahasiswaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collDaftarKelass = null;
			$this->lastDaftarKelasCriteria = null;

			$this->singleLulusToefl = null;

			$this->collTambahSKSs = null;
			$this->lastTambahSKSCriteria = null;

			$this->collTranskrips = null;
			$this->lastTranskripCriteria = null;

			$this->collTranskripAslis = null;
			$this->lastTranskripAsliCriteria = null;

			$this->collMinatMataKuliahs = null;
			$this->lastMinatMataKuliahCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MahasiswaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMahasiswa:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				MahasiswaPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMahasiswa:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MahasiswaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseMahasiswa:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseMahasiswa:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				MahasiswaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MahasiswaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += MahasiswaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collDaftarKelass !== null) {
				foreach ($this->collDaftarKelass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singleLulusToefl !== null) {
				if (!$this->singleLulusToefl->isDeleted()) {
						$affectedRows += $this->singleLulusToefl->save($con);
				}
			}

			if ($this->collTambahSKSs !== null) {
				foreach ($this->collTambahSKSs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTranskrips !== null) {
				foreach ($this->collTranskrips as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTranskripAslis !== null) {
				foreach ($this->collTranskripAslis as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMinatMataKuliahs !== null) {
				foreach ($this->collMinatMataKuliahs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = MahasiswaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collDaftarKelass !== null) {
					foreach ($this->collDaftarKelass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singleLulusToefl !== null) {
					if (!$this->singleLulusToefl->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleLulusToefl->getValidationFailures());
					}
				}

				if ($this->collTambahSKSs !== null) {
					foreach ($this->collTambahSKSs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTranskrips !== null) {
					foreach ($this->collTranskrips as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTranskripAslis !== null) {
					foreach ($this->collTranskripAslis as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMinatMataKuliahs !== null) {
					foreach ($this->collMinatMataKuliahs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MahasiswaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getNrp();
				break;
			case 1:
				return $this->getSksmax();
				break;
			case 2:
				return $this->getIps();
				break;
			case 3:
				return $this->getStatus();
				break;
			case 4:
				return $this->getJurusan();
				break;
			case 5:
				return $this->getNama();
				break;
			case 6:
				return $this->getAlamat();
				break;
			case 7:
				return $this->getTgllahir();
				break;
			case 8:
				return $this->getTmplahir();
				break;
			case 9:
				return $this->getTotbss();
				break;
			case 10:
				return $this->getIpk();
				break;
			case 11:
				return $this->getSkskum();
				break;
			case 12:
				return $this->getTelepon();
				break;
			case 13:
				return $this->getPassword();
				break;
			case 14:
				return $this->getAngkatan();
				break;
			case 15:
				return $this->getNamasma();
				break;
			case 16:
				return $this->getNamaortu();
				break;
			case 17:
				return $this->getKelamin();
				break;
			case 18:
				return $this->getAsisten();
				break;
			case 19:
				return $this->getKonsultasi();
				break;
			case 20:
				return $this->getAa();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MahasiswaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getNrp(),
			$keys[1] => $this->getSksmax(),
			$keys[2] => $this->getIps(),
			$keys[3] => $this->getStatus(),
			$keys[4] => $this->getJurusan(),
			$keys[5] => $this->getNama(),
			$keys[6] => $this->getAlamat(),
			$keys[7] => $this->getTgllahir(),
			$keys[8] => $this->getTmplahir(),
			$keys[9] => $this->getTotbss(),
			$keys[10] => $this->getIpk(),
			$keys[11] => $this->getSkskum(),
			$keys[12] => $this->getTelepon(),
			$keys[13] => $this->getPassword(),
			$keys[14] => $this->getAngkatan(),
			$keys[15] => $this->getNamasma(),
			$keys[16] => $this->getNamaortu(),
			$keys[17] => $this->getKelamin(),
			$keys[18] => $this->getAsisten(),
			$keys[19] => $this->getKonsultasi(),
			$keys[20] => $this->getAa(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MahasiswaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setNrp($value);
				break;
			case 1:
				$this->setSksmax($value);
				break;
			case 2:
				$this->setIps($value);
				break;
			case 3:
				$this->setStatus($value);
				break;
			case 4:
				$this->setJurusan($value);
				break;
			case 5:
				$this->setNama($value);
				break;
			case 6:
				$this->setAlamat($value);
				break;
			case 7:
				$this->setTgllahir($value);
				break;
			case 8:
				$this->setTmplahir($value);
				break;
			case 9:
				$this->setTotbss($value);
				break;
			case 10:
				$this->setIpk($value);
				break;
			case 11:
				$this->setSkskum($value);
				break;
			case 12:
				$this->setTelepon($value);
				break;
			case 13:
				$this->setPassword($value);
				break;
			case 14:
				$this->setAngkatan($value);
				break;
			case 15:
				$this->setNamasma($value);
				break;
			case 16:
				$this->setNamaortu($value);
				break;
			case 17:
				$this->setKelamin($value);
				break;
			case 18:
				$this->setAsisten($value);
				break;
			case 19:
				$this->setKonsultasi($value);
				break;
			case 20:
				$this->setAa($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MahasiswaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setNrp($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setSksmax($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIps($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setStatus($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setJurusan($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNama($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAlamat($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTgllahir($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTmplahir($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTotbss($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIpk($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setSkskum($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setTelepon($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPassword($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setAngkatan($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setNamasma($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setNamaortu($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setKelamin($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setAsisten($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setKonsultasi($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAa($arr[$keys[20]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);

		if ($this->isColumnModified(MahasiswaPeer::NRP)) $criteria->add(MahasiswaPeer::NRP, $this->nrp);
		if ($this->isColumnModified(MahasiswaPeer::SKSMAX)) $criteria->add(MahasiswaPeer::SKSMAX, $this->sksmax);
		if ($this->isColumnModified(MahasiswaPeer::IPS)) $criteria->add(MahasiswaPeer::IPS, $this->ips);
		if ($this->isColumnModified(MahasiswaPeer::STATUS)) $criteria->add(MahasiswaPeer::STATUS, $this->status);
		if ($this->isColumnModified(MahasiswaPeer::JURUSAN)) $criteria->add(MahasiswaPeer::JURUSAN, $this->jurusan);
		if ($this->isColumnModified(MahasiswaPeer::NAMA)) $criteria->add(MahasiswaPeer::NAMA, $this->nama);
		if ($this->isColumnModified(MahasiswaPeer::ALAMAT)) $criteria->add(MahasiswaPeer::ALAMAT, $this->alamat);
		if ($this->isColumnModified(MahasiswaPeer::TGLLAHIR)) $criteria->add(MahasiswaPeer::TGLLAHIR, $this->tgllahir);
		if ($this->isColumnModified(MahasiswaPeer::TMPLAHIR)) $criteria->add(MahasiswaPeer::TMPLAHIR, $this->tmplahir);
		if ($this->isColumnModified(MahasiswaPeer::TOTBSS)) $criteria->add(MahasiswaPeer::TOTBSS, $this->totbss);
		if ($this->isColumnModified(MahasiswaPeer::IPK)) $criteria->add(MahasiswaPeer::IPK, $this->ipk);
		if ($this->isColumnModified(MahasiswaPeer::SKSKUM)) $criteria->add(MahasiswaPeer::SKSKUM, $this->skskum);
		if ($this->isColumnModified(MahasiswaPeer::TELEPON)) $criteria->add(MahasiswaPeer::TELEPON, $this->telepon);
		if ($this->isColumnModified(MahasiswaPeer::PASSWORD)) $criteria->add(MahasiswaPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(MahasiswaPeer::ANGKATAN)) $criteria->add(MahasiswaPeer::ANGKATAN, $this->angkatan);
		if ($this->isColumnModified(MahasiswaPeer::NAMASMA)) $criteria->add(MahasiswaPeer::NAMASMA, $this->namasma);
		if ($this->isColumnModified(MahasiswaPeer::NAMAORTU)) $criteria->add(MahasiswaPeer::NAMAORTU, $this->namaortu);
		if ($this->isColumnModified(MahasiswaPeer::KELAMIN)) $criteria->add(MahasiswaPeer::KELAMIN, $this->kelamin);
		if ($this->isColumnModified(MahasiswaPeer::ASISTEN)) $criteria->add(MahasiswaPeer::ASISTEN, $this->asisten);
		if ($this->isColumnModified(MahasiswaPeer::KONSULTASI)) $criteria->add(MahasiswaPeer::KONSULTASI, $this->konsultasi);
		if ($this->isColumnModified(MahasiswaPeer::AA)) $criteria->add(MahasiswaPeer::AA, $this->aa);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);

		$criteria->add(MahasiswaPeer::NRP, $this->nrp);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getNrp();
	}

	/**
	 * Generic method to set the primary key (nrp column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setNrp($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Mahasiswa (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNrp($this->nrp);

		$copyObj->setSksmax($this->sksmax);

		$copyObj->setIps($this->ips);

		$copyObj->setStatus($this->status);

		$copyObj->setJurusan($this->jurusan);

		$copyObj->setNama($this->nama);

		$copyObj->setAlamat($this->alamat);

		$copyObj->setTgllahir($this->tgllahir);

		$copyObj->setTmplahir($this->tmplahir);

		$copyObj->setTotbss($this->totbss);

		$copyObj->setIpk($this->ipk);

		$copyObj->setSkskum($this->skskum);

		$copyObj->setTelepon($this->telepon);

		$copyObj->setPassword($this->password);

		$copyObj->setAngkatan($this->angkatan);

		$copyObj->setNamasma($this->namasma);

		$copyObj->setNamaortu($this->namaortu);

		$copyObj->setKelamin($this->kelamin);

		$copyObj->setAsisten($this->asisten);

		$copyObj->setKonsultasi($this->konsultasi);

		$copyObj->setAa($this->aa);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getDaftarKelass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDaftarKelas($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getLulusToefl();
			if ($relObj) {
				$copyObj->setLulusToefl($relObj->copy($deepCopy));
			}

			foreach ($this->getTambahSKSs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTambahSKS($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTranskrips() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTranskrip($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTranskripAslis() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTranskripAsli($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMinatMataKuliahs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMinatMataKuliah($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Mahasiswa Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MahasiswaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MahasiswaPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collDaftarKelass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDaftarKelass()
	 */
	public function clearDaftarKelass()
	{
		$this->collDaftarKelass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDaftarKelass collection (array).
	 *
	 * By default this just sets the collDaftarKelass collection to an empty array (like clearcollDaftarKelass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDaftarKelass()
	{
		$this->collDaftarKelass = array();
	}

	/**
	 * Gets an array of DaftarKelas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mahasiswa has previously been saved, it will retrieve
	 * related DaftarKelass from storage. If this Mahasiswa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DaftarKelas[]
	 * @throws     PropelException
	 */
	public function getDaftarKelass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
			   $this->collDaftarKelass = array();
			} else {

				$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

				DaftarKelasPeer::addSelectColumns($criteria);
				$this->collDaftarKelass = DaftarKelasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

				DaftarKelasPeer::addSelectColumns($criteria);
				if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
					$this->collDaftarKelass = DaftarKelasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDaftarKelasCriteria = $criteria;
		return $this->collDaftarKelass;
	}

	/**
	 * Returns the number of related DaftarKelas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DaftarKelas objects.
	 * @throws     PropelException
	 */
	public function countDaftarKelass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

				$count = DaftarKelasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

				if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
					$count = DaftarKelasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDaftarKelass);
				}
			} else {
				$count = count($this->collDaftarKelass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DaftarKelas object to this object
	 * through the DaftarKelas foreign key attribute.
	 *
	 * @param      DaftarKelas $l DaftarKelas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDaftarKelas(DaftarKelas $l)
	{
		if ($this->collDaftarKelass === null) {
			$this->initDaftarKelass();
		}
		if (!in_array($l, $this->collDaftarKelass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDaftarKelass, $l);
			$l->setMahasiswa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mahasiswa is new, it will return
	 * an empty collection; or if this Mahasiswa has previously
	 * been saved, it will retrieve related DaftarKelass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mahasiswa.
	 */
	public function getDaftarKelassJoinFPP($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
				$this->collDaftarKelass = array();
			} else {

				$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinFPP($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

			if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinFPP($criteria, $con, $join_behavior);
			}
		}
		$this->lastDaftarKelasCriteria = $criteria;

		return $this->collDaftarKelass;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mahasiswa is new, it will return
	 * an empty collection; or if this Mahasiswa has previously
	 * been saved, it will retrieve related DaftarKelass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mahasiswa.
	 */
	public function getDaftarKelassJoinKelasMK($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
				$this->collDaftarKelass = array();
			} else {

				$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinKelasMK($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DaftarKelasPeer::NRP, $this->nrp);

			if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinKelasMK($criteria, $con, $join_behavior);
			}
		}
		$this->lastDaftarKelasCriteria = $criteria;

		return $this->collDaftarKelass;
	}

	/**
	 * Gets a single LulusToefl object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     LulusToefl
	 * @throws     PropelException
	 */
	public function getLulusToefl(PropelPDO $con = null)
	{

		if ($this->singleLulusToefl === null && !$this->isNew()) {
			$this->singleLulusToefl = LulusToeflPeer::retrieveByPK($this->nrp, $con);
		}

		return $this->singleLulusToefl;
	}

	/**
	 * Sets a single LulusToefl object as related to this object by a one-to-one relationship.
	 *
	 * @param      LulusToefl $l LulusToefl
	 * @return     Mahasiswa The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLulusToefl(LulusToefl $v)
	{
		$this->singleLulusToefl = $v;

		// Make sure that that the passed-in LulusToefl isn't already associated with this object
		if ($v->getMahasiswa() === null) {
			$v->setMahasiswa($this);
		}

		return $this;
	}

	/**
	 * Clears out the collTambahSKSs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTambahSKSs()
	 */
	public function clearTambahSKSs()
	{
		$this->collTambahSKSs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTambahSKSs collection (array).
	 *
	 * By default this just sets the collTambahSKSs collection to an empty array (like clearcollTambahSKSs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTambahSKSs()
	{
		$this->collTambahSKSs = array();
	}

	/**
	 * Gets an array of TambahSKS objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mahasiswa has previously been saved, it will retrieve
	 * related TambahSKSs from storage. If this Mahasiswa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TambahSKS[]
	 * @throws     PropelException
	 */
	public function getTambahSKSs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTambahSKSs === null) {
			if ($this->isNew()) {
			   $this->collTambahSKSs = array();
			} else {

				$criteria->add(TambahSKSPeer::NRP, $this->nrp);

				TambahSKSPeer::addSelectColumns($criteria);
				$this->collTambahSKSs = TambahSKSPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TambahSKSPeer::NRP, $this->nrp);

				TambahSKSPeer::addSelectColumns($criteria);
				if (!isset($this->lastTambahSKSCriteria) || !$this->lastTambahSKSCriteria->equals($criteria)) {
					$this->collTambahSKSs = TambahSKSPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTambahSKSCriteria = $criteria;
		return $this->collTambahSKSs;
	}

	/**
	 * Returns the number of related TambahSKS objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TambahSKS objects.
	 * @throws     PropelException
	 */
	public function countTambahSKSs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTambahSKSs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TambahSKSPeer::NRP, $this->nrp);

				$count = TambahSKSPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TambahSKSPeer::NRP, $this->nrp);

				if (!isset($this->lastTambahSKSCriteria) || !$this->lastTambahSKSCriteria->equals($criteria)) {
					$count = TambahSKSPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTambahSKSs);
				}
			} else {
				$count = count($this->collTambahSKSs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TambahSKS object to this object
	 * through the TambahSKS foreign key attribute.
	 *
	 * @param      TambahSKS $l TambahSKS
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTambahSKS(TambahSKS $l)
	{
		if ($this->collTambahSKSs === null) {
			$this->initTambahSKSs();
		}
		if (!in_array($l, $this->collTambahSKSs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTambahSKSs, $l);
			$l->setMahasiswa($this);
		}
	}

	/**
	 * Clears out the collTranskrips collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTranskrips()
	 */
	public function clearTranskrips()
	{
		$this->collTranskrips = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTranskrips collection (array).
	 *
	 * By default this just sets the collTranskrips collection to an empty array (like clearcollTranskrips());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTranskrips()
	{
		$this->collTranskrips = array();
	}

	/**
	 * Gets an array of Transkrip objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mahasiswa has previously been saved, it will retrieve
	 * related Transkrips from storage. If this Mahasiswa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Transkrip[]
	 * @throws     PropelException
	 */
	public function getTranskrips($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTranskrips === null) {
			if ($this->isNew()) {
			   $this->collTranskrips = array();
			} else {

				$criteria->add(TranskripPeer::NRP, $this->nrp);

				TranskripPeer::addSelectColumns($criteria);
				$this->collTranskrips = TranskripPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TranskripPeer::NRP, $this->nrp);

				TranskripPeer::addSelectColumns($criteria);
				if (!isset($this->lastTranskripCriteria) || !$this->lastTranskripCriteria->equals($criteria)) {
					$this->collTranskrips = TranskripPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTranskripCriteria = $criteria;
		return $this->collTranskrips;
	}

	/**
	 * Returns the number of related Transkrip objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Transkrip objects.
	 * @throws     PropelException
	 */
	public function countTranskrips(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTranskrips === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TranskripPeer::NRP, $this->nrp);

				$count = TranskripPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TranskripPeer::NRP, $this->nrp);

				if (!isset($this->lastTranskripCriteria) || !$this->lastTranskripCriteria->equals($criteria)) {
					$count = TranskripPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTranskrips);
				}
			} else {
				$count = count($this->collTranskrips);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Transkrip object to this object
	 * through the Transkrip foreign key attribute.
	 *
	 * @param      Transkrip $l Transkrip
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTranskrip(Transkrip $l)
	{
		if ($this->collTranskrips === null) {
			$this->initTranskrips();
		}
		if (!in_array($l, $this->collTranskrips, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTranskrips, $l);
			$l->setMahasiswa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mahasiswa is new, it will return
	 * an empty collection; or if this Mahasiswa has previously
	 * been saved, it will retrieve related Transkrips from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mahasiswa.
	 */
	public function getTranskripsJoinMataKuliah($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTranskrips === null) {
			if ($this->isNew()) {
				$this->collTranskrips = array();
			} else {

				$criteria->add(TranskripPeer::NRP, $this->nrp);

				$this->collTranskrips = TranskripPeer::doSelectJoinMataKuliah($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TranskripPeer::NRP, $this->nrp);

			if (!isset($this->lastTranskripCriteria) || !$this->lastTranskripCriteria->equals($criteria)) {
				$this->collTranskrips = TranskripPeer::doSelectJoinMataKuliah($criteria, $con, $join_behavior);
			}
		}
		$this->lastTranskripCriteria = $criteria;

		return $this->collTranskrips;
	}

	/**
	 * Clears out the collTranskripAslis collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTranskripAslis()
	 */
	public function clearTranskripAslis()
	{
		$this->collTranskripAslis = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTranskripAslis collection (array).
	 *
	 * By default this just sets the collTranskripAslis collection to an empty array (like clearcollTranskripAslis());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTranskripAslis()
	{
		$this->collTranskripAslis = array();
	}

	/**
	 * Gets an array of TranskripAsli objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mahasiswa has previously been saved, it will retrieve
	 * related TranskripAslis from storage. If this Mahasiswa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TranskripAsli[]
	 * @throws     PropelException
	 */
	public function getTranskripAslis($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTranskripAslis === null) {
			if ($this->isNew()) {
			   $this->collTranskripAslis = array();
			} else {

				$criteria->add(TranskripAsliPeer::NRP, $this->nrp);

				TranskripAsliPeer::addSelectColumns($criteria);
				$this->collTranskripAslis = TranskripAsliPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TranskripAsliPeer::NRP, $this->nrp);

				TranskripAsliPeer::addSelectColumns($criteria);
				if (!isset($this->lastTranskripAsliCriteria) || !$this->lastTranskripAsliCriteria->equals($criteria)) {
					$this->collTranskripAslis = TranskripAsliPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTranskripAsliCriteria = $criteria;
		return $this->collTranskripAslis;
	}

	/**
	 * Returns the number of related TranskripAsli objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TranskripAsli objects.
	 * @throws     PropelException
	 */
	public function countTranskripAslis(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTranskripAslis === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TranskripAsliPeer::NRP, $this->nrp);

				$count = TranskripAsliPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TranskripAsliPeer::NRP, $this->nrp);

				if (!isset($this->lastTranskripAsliCriteria) || !$this->lastTranskripAsliCriteria->equals($criteria)) {
					$count = TranskripAsliPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTranskripAslis);
				}
			} else {
				$count = count($this->collTranskripAslis);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TranskripAsli object to this object
	 * through the TranskripAsli foreign key attribute.
	 *
	 * @param      TranskripAsli $l TranskripAsli
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTranskripAsli(TranskripAsli $l)
	{
		if ($this->collTranskripAslis === null) {
			$this->initTranskripAslis();
		}
		if (!in_array($l, $this->collTranskripAslis, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTranskripAslis, $l);
			$l->setMahasiswa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mahasiswa is new, it will return
	 * an empty collection; or if this Mahasiswa has previously
	 * been saved, it will retrieve related TranskripAslis from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mahasiswa.
	 */
	public function getTranskripAslisJoinMataKuliah($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTranskripAslis === null) {
			if ($this->isNew()) {
				$this->collTranskripAslis = array();
			} else {

				$criteria->add(TranskripAsliPeer::NRP, $this->nrp);

				$this->collTranskripAslis = TranskripAsliPeer::doSelectJoinMataKuliah($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TranskripAsliPeer::NRP, $this->nrp);

			if (!isset($this->lastTranskripAsliCriteria) || !$this->lastTranskripAsliCriteria->equals($criteria)) {
				$this->collTranskripAslis = TranskripAsliPeer::doSelectJoinMataKuliah($criteria, $con, $join_behavior);
			}
		}
		$this->lastTranskripAsliCriteria = $criteria;

		return $this->collTranskripAslis;
	}

	/**
	 * Clears out the collMinatMataKuliahs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMinatMataKuliahs()
	 */
	public function clearMinatMataKuliahs()
	{
		$this->collMinatMataKuliahs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMinatMataKuliahs collection (array).
	 *
	 * By default this just sets the collMinatMataKuliahs collection to an empty array (like clearcollMinatMataKuliahs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMinatMataKuliahs()
	{
		$this->collMinatMataKuliahs = array();
	}

	/**
	 * Gets an array of MinatMataKuliah objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mahasiswa has previously been saved, it will retrieve
	 * related MinatMataKuliahs from storage. If this Mahasiswa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MinatMataKuliah[]
	 * @throws     PropelException
	 */
	public function getMinatMataKuliahs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMinatMataKuliahs === null) {
			if ($this->isNew()) {
			   $this->collMinatMataKuliahs = array();
			} else {

				$criteria->add(MinatMataKuliahPeer::NRP, $this->nrp);

				MinatMataKuliahPeer::addSelectColumns($criteria);
				$this->collMinatMataKuliahs = MinatMataKuliahPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MinatMataKuliahPeer::NRP, $this->nrp);

				MinatMataKuliahPeer::addSelectColumns($criteria);
				if (!isset($this->lastMinatMataKuliahCriteria) || !$this->lastMinatMataKuliahCriteria->equals($criteria)) {
					$this->collMinatMataKuliahs = MinatMataKuliahPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMinatMataKuliahCriteria = $criteria;
		return $this->collMinatMataKuliahs;
	}

	/**
	 * Returns the number of related MinatMataKuliah objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MinatMataKuliah objects.
	 * @throws     PropelException
	 */
	public function countMinatMataKuliahs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMinatMataKuliahs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MinatMataKuliahPeer::NRP, $this->nrp);

				$count = MinatMataKuliahPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MinatMataKuliahPeer::NRP, $this->nrp);

				if (!isset($this->lastMinatMataKuliahCriteria) || !$this->lastMinatMataKuliahCriteria->equals($criteria)) {
					$count = MinatMataKuliahPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMinatMataKuliahs);
				}
			} else {
				$count = count($this->collMinatMataKuliahs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MinatMataKuliah object to this object
	 * through the MinatMataKuliah foreign key attribute.
	 *
	 * @param      MinatMataKuliah $l MinatMataKuliah
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMinatMataKuliah(MinatMataKuliah $l)
	{
		if ($this->collMinatMataKuliahs === null) {
			$this->initMinatMataKuliahs();
		}
		if (!in_array($l, $this->collMinatMataKuliahs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMinatMataKuliahs, $l);
			$l->setMahasiswa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mahasiswa is new, it will return
	 * an empty collection; or if this Mahasiswa has previously
	 * been saved, it will retrieve related MinatMataKuliahs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mahasiswa.
	 */
	public function getMinatMataKuliahsJoinMataKuliah($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MahasiswaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMinatMataKuliahs === null) {
			if ($this->isNew()) {
				$this->collMinatMataKuliahs = array();
			} else {

				$criteria->add(MinatMataKuliahPeer::NRP, $this->nrp);

				$this->collMinatMataKuliahs = MinatMataKuliahPeer::doSelectJoinMataKuliah($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MinatMataKuliahPeer::NRP, $this->nrp);

			if (!isset($this->lastMinatMataKuliahCriteria) || !$this->lastMinatMataKuliahCriteria->equals($criteria)) {
				$this->collMinatMataKuliahs = MinatMataKuliahPeer::doSelectJoinMataKuliah($criteria, $con, $join_behavior);
			}
		}
		$this->lastMinatMataKuliahCriteria = $criteria;

		return $this->collMinatMataKuliahs;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collDaftarKelass) {
				foreach ((array) $this->collDaftarKelass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singleLulusToefl) {
				$this->singleLulusToefl->clearAllReferences($deep);
			}
			if ($this->collTambahSKSs) {
				foreach ((array) $this->collTambahSKSs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTranskrips) {
				foreach ((array) $this->collTranskrips as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTranskripAslis) {
				foreach ((array) $this->collTranskripAslis as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMinatMataKuliahs) {
				foreach ((array) $this->collMinatMataKuliahs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collDaftarKelass = null;
		$this->singleLulusToefl = null;
		$this->collTambahSKSs = null;
		$this->collTranskrips = null;
		$this->collTranskripAslis = null;
		$this->collMinatMataKuliahs = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseMahasiswa:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseMahasiswa::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseMahasiswa

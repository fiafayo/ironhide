<?php

/**
 * Base class that represents a row from the 'tk_kelas_mk' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 17 01:36:52 2013
 *
 * @package    lib.model.perwalian_ft.om
 */
abstract class BaseKelasMK extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        KelasMKPeer
	 */
	protected static $peer;

	/**
	 * The value for the kode_kelas field.
	 * @var        string
	 */
	protected $kode_kelas;

	/**
	 * The value for the kode_mk field.
	 * @var        string
	 */
	protected $kode_mk;

	/**
	 * The value for the kp field.
	 * Note: this column has a database default value of: '-'
	 * @var        string
	 */
	protected $kp;

	/**
	 * The value for the isi field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $isi;

	/**
	 * The value for the kapasitas field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $kapasitas;

	/**
	 * The value for the semester field.
	 * @var        string
	 */
	protected $semester;

	/**
	 * The value for the tahun field.
	 * @var        string
	 */
	protected $tahun;

	/**
	 * The value for the status_buka field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $status_buka;

	/**
	 * The value for the dmb field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $dmb;

	/**
	 * The value for the waktu_buka field.
	 * @var        string
	 */
	protected $waktu_buka;

	/**
	 * @var        MataKuliah
	 */
	protected $aMataKuliah;

	/**
	 * @var        array DaftarKelas[] Collection to store aggregation of DaftarKelas objects.
	 */
	protected $collDaftarKelass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDaftarKelass.
	 */
	private $lastDaftarKelasCriteria = null;

	/**
	 * @var        array DosenKelas[] Collection to store aggregation of DosenKelas objects.
	 */
	protected $collDosenKelass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDosenKelass.
	 */
	private $lastDosenKelasCriteria = null;

	/**
	 * @var        array JadwalKuliah[] Collection to store aggregation of JadwalKuliah objects.
	 */
	protected $collJadwalKuliahs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJadwalKuliahs.
	 */
	private $lastJadwalKuliahCriteria = null;

	/**
	 * @var        array KelasJurusan[] Collection to store aggregation of KelasJurusan objects.
	 */
	protected $collKelasJurusans;

	/**
	 * @var        Criteria The criteria used to select the current contents of collKelasJurusans.
	 */
	private $lastKelasJurusanCriteria = null;

	/**
	 * @var        array SettingNrp[] Collection to store aggregation of SettingNrp objects.
	 */
	protected $collSettingNrps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSettingNrps.
	 */
	private $lastSettingNrpCriteria = null;

	/**
	 * @var        array JadwalRuangMk[] Collection to store aggregation of JadwalRuangMk objects.
	 */
	protected $collJadwalRuangMks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collJadwalRuangMks.
	 */
	private $lastJadwalRuangMkCriteria = null;

	/**
	 * @var        array SoalUjian[] Collection to store aggregation of SoalUjian objects.
	 */
	protected $collSoalUjians;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSoalUjians.
	 */
	private $lastSoalUjianCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'KelasMKPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->kp = '-';
		$this->isi = 0;
		$this->kapasitas = 0;
		$this->status_buka = false;
		$this->dmb = false;
	}

	/**
	 * Initializes internal state of BaseKelasMK object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [kode_kelas] column value.
	 * 
	 * @return     string
	 */
	public function getKodeKelas()
	{
		return $this->kode_kelas;
	}

	/**
	 * Get the [kode_mk] column value.
	 * 
	 * @return     string
	 */
	public function getKodeMk()
	{
		return $this->kode_mk;
	}

	/**
	 * Get the [kp] column value.
	 * 
	 * @return     string
	 */
	public function getKp()
	{
		return $this->kp;
	}

	/**
	 * Get the [isi] column value.
	 * 
	 * @return     int
	 */
	public function getIsi()
	{
		return $this->isi;
	}

	/**
	 * Get the [kapasitas] column value.
	 * 
	 * @return     int
	 */
	public function getKapasitas()
	{
		return $this->kapasitas;
	}

	/**
	 * Get the [semester] column value.
	 * 
	 * @return     string
	 */
	public function getSemester()
	{
		return $this->semester;
	}

	/**
	 * Get the [tahun] column value.
	 * 
	 * @return     string
	 */
	public function getTahun()
	{
		return $this->tahun;
	}

	/**
	 * Get the [status_buka] column value.
	 * 
	 * @return     boolean
	 */
	public function getStatusBuka()
	{
		return $this->status_buka;
	}

	/**
	 * Get the [dmb] column value.
	 * 
	 * @return     boolean
	 */
	public function getDmb()
	{
		return $this->dmb;
	}

	/**
	 * Get the [optionally formatted] temporal [waktu_buka] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWaktuBuka($format = 'Y-m-d H:i:s')
	{
		if ($this->waktu_buka === null) {
			return null;
		}


		if ($this->waktu_buka === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->waktu_buka);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->waktu_buka, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [kode_kelas] column.
	 * 
	 * @param      string $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setKodeKelas($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kode_kelas !== $v) {
			$this->kode_kelas = $v;
			$this->modifiedColumns[] = KelasMKPeer::KODE_KELAS;
		}

		return $this;
	} // setKodeKelas()

	/**
	 * Set the value of [kode_mk] column.
	 * 
	 * @param      string $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setKodeMk($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kode_mk !== $v) {
			$this->kode_mk = $v;
			$this->modifiedColumns[] = KelasMKPeer::KODE_MK;
		}

		if ($this->aMataKuliah !== null && $this->aMataKuliah->getKodeMk() !== $v) {
			$this->aMataKuliah = null;
		}

		return $this;
	} // setKodeMk()

	/**
	 * Set the value of [kp] column.
	 * 
	 * @param      string $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setKp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kp !== $v || $this->isNew()) {
			$this->kp = $v;
			$this->modifiedColumns[] = KelasMKPeer::KP;
		}

		return $this;
	} // setKp()

	/**
	 * Set the value of [isi] column.
	 * 
	 * @param      int $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setIsi($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->isi !== $v || $this->isNew()) {
			$this->isi = $v;
			$this->modifiedColumns[] = KelasMKPeer::ISI;
		}

		return $this;
	} // setIsi()

	/**
	 * Set the value of [kapasitas] column.
	 * 
	 * @param      int $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setKapasitas($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->kapasitas !== $v || $this->isNew()) {
			$this->kapasitas = $v;
			$this->modifiedColumns[] = KelasMKPeer::KAPASITAS;
		}

		return $this;
	} // setKapasitas()

	/**
	 * Set the value of [semester] column.
	 * 
	 * @param      string $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setSemester($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->semester !== $v) {
			$this->semester = $v;
			$this->modifiedColumns[] = KelasMKPeer::SEMESTER;
		}

		return $this;
	} // setSemester()

	/**
	 * Set the value of [tahun] column.
	 * 
	 * @param      string $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setTahun($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tahun !== $v) {
			$this->tahun = $v;
			$this->modifiedColumns[] = KelasMKPeer::TAHUN;
		}

		return $this;
	} // setTahun()

	/**
	 * Set the value of [status_buka] column.
	 * 
	 * @param      boolean $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setStatusBuka($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->status_buka !== $v || $this->isNew()) {
			$this->status_buka = $v;
			$this->modifiedColumns[] = KelasMKPeer::STATUS_BUKA;
		}

		return $this;
	} // setStatusBuka()

	/**
	 * Set the value of [dmb] column.
	 * 
	 * @param      boolean $v new value
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setDmb($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->dmb !== $v || $this->isNew()) {
			$this->dmb = $v;
			$this->modifiedColumns[] = KelasMKPeer::DMB;
		}

		return $this;
	} // setDmb()

	/**
	 * Sets the value of [waktu_buka] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     KelasMK The current object (for fluent API support)
	 */
	public function setWaktuBuka($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->waktu_buka !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->waktu_buka !== null && $tmpDt = new DateTime($this->waktu_buka)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->waktu_buka = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = KelasMKPeer::WAKTU_BUKA;
			}
		} // if either are not null

		return $this;
	} // setWaktuBuka()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->kp !== '-') {
				return false;
			}

			if ($this->isi !== 0) {
				return false;
			}

			if ($this->kapasitas !== 0) {
				return false;
			}

			if ($this->status_buka !== false) {
				return false;
			}

			if ($this->dmb !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->kode_kelas = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->kode_mk = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->kp = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->isi = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->kapasitas = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->semester = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->tahun = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->status_buka = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->dmb = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->waktu_buka = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 10; // 10 = KelasMKPeer::NUM_COLUMNS - KelasMKPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating KelasMK object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMataKuliah !== null && $this->kode_mk !== $this->aMataKuliah->getKodeMk()) {
			$this->aMataKuliah = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(KelasMKPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = KelasMKPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMataKuliah = null;
			$this->collDaftarKelass = null;
			$this->lastDaftarKelasCriteria = null;

			$this->collDosenKelass = null;
			$this->lastDosenKelasCriteria = null;

			$this->collJadwalKuliahs = null;
			$this->lastJadwalKuliahCriteria = null;

			$this->collKelasJurusans = null;
			$this->lastKelasJurusanCriteria = null;

			$this->collSettingNrps = null;
			$this->lastSettingNrpCriteria = null;

			$this->collJadwalRuangMks = null;
			$this->lastJadwalRuangMkCriteria = null;

			$this->collSoalUjians = null;
			$this->lastSoalUjianCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(KelasMKPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseKelasMK:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				KelasMKPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseKelasMK:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(KelasMKPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseKelasMK:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseKelasMK:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				KelasMKPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMataKuliah !== null) {
				if ($this->aMataKuliah->isModified() || $this->aMataKuliah->isNew()) {
					$affectedRows += $this->aMataKuliah->save($con);
				}
				$this->setMataKuliah($this->aMataKuliah);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = KelasMKPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += KelasMKPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collDaftarKelass !== null) {
				foreach ($this->collDaftarKelass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDosenKelass !== null) {
				foreach ($this->collDosenKelass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJadwalKuliahs !== null) {
				foreach ($this->collJadwalKuliahs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collKelasJurusans !== null) {
				foreach ($this->collKelasJurusans as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSettingNrps !== null) {
				foreach ($this->collSettingNrps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collJadwalRuangMks !== null) {
				foreach ($this->collJadwalRuangMks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSoalUjians !== null) {
				foreach ($this->collSoalUjians as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMataKuliah !== null) {
				if (!$this->aMataKuliah->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMataKuliah->getValidationFailures());
				}
			}


			if (($retval = KelasMKPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collDaftarKelass !== null) {
					foreach ($this->collDaftarKelass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDosenKelass !== null) {
					foreach ($this->collDosenKelass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJadwalKuliahs !== null) {
					foreach ($this->collJadwalKuliahs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collKelasJurusans !== null) {
					foreach ($this->collKelasJurusans as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSettingNrps !== null) {
					foreach ($this->collSettingNrps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collJadwalRuangMks !== null) {
					foreach ($this->collJadwalRuangMks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSoalUjians !== null) {
					foreach ($this->collSoalUjians as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = KelasMKPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getKodeKelas();
				break;
			case 1:
				return $this->getKodeMk();
				break;
			case 2:
				return $this->getKp();
				break;
			case 3:
				return $this->getIsi();
				break;
			case 4:
				return $this->getKapasitas();
				break;
			case 5:
				return $this->getSemester();
				break;
			case 6:
				return $this->getTahun();
				break;
			case 7:
				return $this->getStatusBuka();
				break;
			case 8:
				return $this->getDmb();
				break;
			case 9:
				return $this->getWaktuBuka();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = KelasMKPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getKodeKelas(),
			$keys[1] => $this->getKodeMk(),
			$keys[2] => $this->getKp(),
			$keys[3] => $this->getIsi(),
			$keys[4] => $this->getKapasitas(),
			$keys[5] => $this->getSemester(),
			$keys[6] => $this->getTahun(),
			$keys[7] => $this->getStatusBuka(),
			$keys[8] => $this->getDmb(),
			$keys[9] => $this->getWaktuBuka(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = KelasMKPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setKodeKelas($value);
				break;
			case 1:
				$this->setKodeMk($value);
				break;
			case 2:
				$this->setKp($value);
				break;
			case 3:
				$this->setIsi($value);
				break;
			case 4:
				$this->setKapasitas($value);
				break;
			case 5:
				$this->setSemester($value);
				break;
			case 6:
				$this->setTahun($value);
				break;
			case 7:
				$this->setStatusBuka($value);
				break;
			case 8:
				$this->setDmb($value);
				break;
			case 9:
				$this->setWaktuBuka($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = KelasMKPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setKodeKelas($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setKodeMk($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setKp($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIsi($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setKapasitas($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setSemester($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTahun($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setStatusBuka($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDmb($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setWaktuBuka($arr[$keys[9]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);

		if ($this->isColumnModified(KelasMKPeer::KODE_KELAS)) $criteria->add(KelasMKPeer::KODE_KELAS, $this->kode_kelas);
		if ($this->isColumnModified(KelasMKPeer::KODE_MK)) $criteria->add(KelasMKPeer::KODE_MK, $this->kode_mk);
		if ($this->isColumnModified(KelasMKPeer::KP)) $criteria->add(KelasMKPeer::KP, $this->kp);
		if ($this->isColumnModified(KelasMKPeer::ISI)) $criteria->add(KelasMKPeer::ISI, $this->isi);
		if ($this->isColumnModified(KelasMKPeer::KAPASITAS)) $criteria->add(KelasMKPeer::KAPASITAS, $this->kapasitas);
		if ($this->isColumnModified(KelasMKPeer::SEMESTER)) $criteria->add(KelasMKPeer::SEMESTER, $this->semester);
		if ($this->isColumnModified(KelasMKPeer::TAHUN)) $criteria->add(KelasMKPeer::TAHUN, $this->tahun);
		if ($this->isColumnModified(KelasMKPeer::STATUS_BUKA)) $criteria->add(KelasMKPeer::STATUS_BUKA, $this->status_buka);
		if ($this->isColumnModified(KelasMKPeer::DMB)) $criteria->add(KelasMKPeer::DMB, $this->dmb);
		if ($this->isColumnModified(KelasMKPeer::WAKTU_BUKA)) $criteria->add(KelasMKPeer::WAKTU_BUKA, $this->waktu_buka);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);

		$criteria->add(KelasMKPeer::KODE_KELAS, $this->kode_kelas);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getKodeKelas();
	}

	/**
	 * Generic method to set the primary key (kode_kelas column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setKodeKelas($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of KelasMK (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setKodeKelas($this->kode_kelas);

		$copyObj->setKodeMk($this->kode_mk);

		$copyObj->setKp($this->kp);

		$copyObj->setIsi($this->isi);

		$copyObj->setKapasitas($this->kapasitas);

		$copyObj->setSemester($this->semester);

		$copyObj->setTahun($this->tahun);

		$copyObj->setStatusBuka($this->status_buka);

		$copyObj->setDmb($this->dmb);

		$copyObj->setWaktuBuka($this->waktu_buka);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getDaftarKelass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDaftarKelas($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDosenKelass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDosenKelas($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJadwalKuliahs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJadwalKuliah($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getKelasJurusans() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addKelasJurusan($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSettingNrps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSettingNrp($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getJadwalRuangMks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addJadwalRuangMk($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSoalUjians() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSoalUjian($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     KelasMK Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     KelasMKPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new KelasMKPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a MataKuliah object.
	 *
	 * @param      MataKuliah $v
	 * @return     KelasMK The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMataKuliah(MataKuliah $v = null)
	{
		if ($v === null) {
			$this->setKodeMk(NULL);
		} else {
			$this->setKodeMk($v->getKodeMk());
		}

		$this->aMataKuliah = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MataKuliah object, it will not be re-added.
		if ($v !== null) {
			$v->addKelasMK($this);
		}

		return $this;
	}


	/**
	 * Get the associated MataKuliah object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MataKuliah The associated MataKuliah object.
	 * @throws     PropelException
	 */
	public function getMataKuliah(PropelPDO $con = null)
	{
		if ($this->aMataKuliah === null && (($this->kode_mk !== "" && $this->kode_mk !== null))) {
			$this->aMataKuliah = MataKuliahPeer::retrieveByPk($this->kode_mk);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMataKuliah->addKelasMKs($this);
			 */
		}
		return $this->aMataKuliah;
	}

	/**
	 * Clears out the collDaftarKelass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDaftarKelass()
	 */
	public function clearDaftarKelass()
	{
		$this->collDaftarKelass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDaftarKelass collection (array).
	 *
	 * By default this just sets the collDaftarKelass collection to an empty array (like clearcollDaftarKelass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDaftarKelass()
	{
		$this->collDaftarKelass = array();
	}

	/**
	 * Gets an array of DaftarKelas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related DaftarKelass from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DaftarKelas[]
	 * @throws     PropelException
	 */
	public function getDaftarKelass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
			   $this->collDaftarKelass = array();
			} else {

				$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

				DaftarKelasPeer::addSelectColumns($criteria);
				$this->collDaftarKelass = DaftarKelasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

				DaftarKelasPeer::addSelectColumns($criteria);
				if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
					$this->collDaftarKelass = DaftarKelasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDaftarKelasCriteria = $criteria;
		return $this->collDaftarKelass;
	}

	/**
	 * Returns the number of related DaftarKelas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DaftarKelas objects.
	 * @throws     PropelException
	 */
	public function countDaftarKelass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

				$count = DaftarKelasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
					$count = DaftarKelasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDaftarKelass);
				}
			} else {
				$count = count($this->collDaftarKelass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DaftarKelas object to this object
	 * through the DaftarKelas foreign key attribute.
	 *
	 * @param      DaftarKelas $l DaftarKelas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDaftarKelas(DaftarKelas $l)
	{
		if ($this->collDaftarKelass === null) {
			$this->initDaftarKelass();
		}
		if (!in_array($l, $this->collDaftarKelass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDaftarKelass, $l);
			$l->setKelasMK($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related DaftarKelass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getDaftarKelassJoinFPP($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
				$this->collDaftarKelass = array();
			} else {

				$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinFPP($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinFPP($criteria, $con, $join_behavior);
			}
		}
		$this->lastDaftarKelasCriteria = $criteria;

		return $this->collDaftarKelass;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related DaftarKelass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getDaftarKelassJoinMahasiswa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDaftarKelass === null) {
			if ($this->isNew()) {
				$this->collDaftarKelass = array();
			} else {

				$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinMahasiswa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DaftarKelasPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastDaftarKelasCriteria) || !$this->lastDaftarKelasCriteria->equals($criteria)) {
				$this->collDaftarKelass = DaftarKelasPeer::doSelectJoinMahasiswa($criteria, $con, $join_behavior);
			}
		}
		$this->lastDaftarKelasCriteria = $criteria;

		return $this->collDaftarKelass;
	}

	/**
	 * Clears out the collDosenKelass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDosenKelass()
	 */
	public function clearDosenKelass()
	{
		$this->collDosenKelass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDosenKelass collection (array).
	 *
	 * By default this just sets the collDosenKelass collection to an empty array (like clearcollDosenKelass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDosenKelass()
	{
		$this->collDosenKelass = array();
	}

	/**
	 * Gets an array of DosenKelas objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related DosenKelass from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array DosenKelas[]
	 * @throws     PropelException
	 */
	public function getDosenKelass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDosenKelass === null) {
			if ($this->isNew()) {
			   $this->collDosenKelass = array();
			} else {

				$criteria->add(DosenKelasPeer::KODE_KELAS, $this->kode_kelas);

				DosenKelasPeer::addSelectColumns($criteria);
				$this->collDosenKelass = DosenKelasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DosenKelasPeer::KODE_KELAS, $this->kode_kelas);

				DosenKelasPeer::addSelectColumns($criteria);
				if (!isset($this->lastDosenKelasCriteria) || !$this->lastDosenKelasCriteria->equals($criteria)) {
					$this->collDosenKelass = DosenKelasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDosenKelasCriteria = $criteria;
		return $this->collDosenKelass;
	}

	/**
	 * Returns the number of related DosenKelas objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related DosenKelas objects.
	 * @throws     PropelException
	 */
	public function countDosenKelass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDosenKelass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DosenKelasPeer::KODE_KELAS, $this->kode_kelas);

				$count = DosenKelasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DosenKelasPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastDosenKelasCriteria) || !$this->lastDosenKelasCriteria->equals($criteria)) {
					$count = DosenKelasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDosenKelass);
				}
			} else {
				$count = count($this->collDosenKelass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a DosenKelas object to this object
	 * through the DosenKelas foreign key attribute.
	 *
	 * @param      DosenKelas $l DosenKelas
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDosenKelas(DosenKelas $l)
	{
		if ($this->collDosenKelass === null) {
			$this->initDosenKelass();
		}
		if (!in_array($l, $this->collDosenKelass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDosenKelass, $l);
			$l->setKelasMK($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related DosenKelass from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getDosenKelassJoinDosen($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDosenKelass === null) {
			if ($this->isNew()) {
				$this->collDosenKelass = array();
			} else {

				$criteria->add(DosenKelasPeer::KODE_KELAS, $this->kode_kelas);

				$this->collDosenKelass = DosenKelasPeer::doSelectJoinDosen($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DosenKelasPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastDosenKelasCriteria) || !$this->lastDosenKelasCriteria->equals($criteria)) {
				$this->collDosenKelass = DosenKelasPeer::doSelectJoinDosen($criteria, $con, $join_behavior);
			}
		}
		$this->lastDosenKelasCriteria = $criteria;

		return $this->collDosenKelass;
	}

	/**
	 * Clears out the collJadwalKuliahs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJadwalKuliahs()
	 */
	public function clearJadwalKuliahs()
	{
		$this->collJadwalKuliahs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJadwalKuliahs collection (array).
	 *
	 * By default this just sets the collJadwalKuliahs collection to an empty array (like clearcollJadwalKuliahs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJadwalKuliahs()
	{
		$this->collJadwalKuliahs = array();
	}

	/**
	 * Gets an array of JadwalKuliah objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related JadwalKuliahs from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JadwalKuliah[]
	 * @throws     PropelException
	 */
	public function getJadwalKuliahs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJadwalKuliahs === null) {
			if ($this->isNew()) {
			   $this->collJadwalKuliahs = array();
			} else {

				$criteria->add(JadwalKuliahPeer::KODE_KELAS, $this->kode_kelas);

				JadwalKuliahPeer::addSelectColumns($criteria);
				$this->collJadwalKuliahs = JadwalKuliahPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JadwalKuliahPeer::KODE_KELAS, $this->kode_kelas);

				JadwalKuliahPeer::addSelectColumns($criteria);
				if (!isset($this->lastJadwalKuliahCriteria) || !$this->lastJadwalKuliahCriteria->equals($criteria)) {
					$this->collJadwalKuliahs = JadwalKuliahPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJadwalKuliahCriteria = $criteria;
		return $this->collJadwalKuliahs;
	}

	/**
	 * Returns the number of related JadwalKuliah objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JadwalKuliah objects.
	 * @throws     PropelException
	 */
	public function countJadwalKuliahs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJadwalKuliahs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JadwalKuliahPeer::KODE_KELAS, $this->kode_kelas);

				$count = JadwalKuliahPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JadwalKuliahPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastJadwalKuliahCriteria) || !$this->lastJadwalKuliahCriteria->equals($criteria)) {
					$count = JadwalKuliahPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collJadwalKuliahs);
				}
			} else {
				$count = count($this->collJadwalKuliahs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JadwalKuliah object to this object
	 * through the JadwalKuliah foreign key attribute.
	 *
	 * @param      JadwalKuliah $l JadwalKuliah
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJadwalKuliah(JadwalKuliah $l)
	{
		if ($this->collJadwalKuliahs === null) {
			$this->initJadwalKuliahs();
		}
		if (!in_array($l, $this->collJadwalKuliahs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJadwalKuliahs, $l);
			$l->setKelasMK($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related JadwalKuliahs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getJadwalKuliahsJoinRuang($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJadwalKuliahs === null) {
			if ($this->isNew()) {
				$this->collJadwalKuliahs = array();
			} else {

				$criteria->add(JadwalKuliahPeer::KODE_KELAS, $this->kode_kelas);

				$this->collJadwalKuliahs = JadwalKuliahPeer::doSelectJoinRuang($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JadwalKuliahPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastJadwalKuliahCriteria) || !$this->lastJadwalKuliahCriteria->equals($criteria)) {
				$this->collJadwalKuliahs = JadwalKuliahPeer::doSelectJoinRuang($criteria, $con, $join_behavior);
			}
		}
		$this->lastJadwalKuliahCriteria = $criteria;

		return $this->collJadwalKuliahs;
	}

	/**
	 * Clears out the collKelasJurusans collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addKelasJurusans()
	 */
	public function clearKelasJurusans()
	{
		$this->collKelasJurusans = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collKelasJurusans collection (array).
	 *
	 * By default this just sets the collKelasJurusans collection to an empty array (like clearcollKelasJurusans());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initKelasJurusans()
	{
		$this->collKelasJurusans = array();
	}

	/**
	 * Gets an array of KelasJurusan objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related KelasJurusans from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array KelasJurusan[]
	 * @throws     PropelException
	 */
	public function getKelasJurusans($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collKelasJurusans === null) {
			if ($this->isNew()) {
			   $this->collKelasJurusans = array();
			} else {

				$criteria->add(KelasJurusanPeer::KODE_KELAS, $this->kode_kelas);

				KelasJurusanPeer::addSelectColumns($criteria);
				$this->collKelasJurusans = KelasJurusanPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(KelasJurusanPeer::KODE_KELAS, $this->kode_kelas);

				KelasJurusanPeer::addSelectColumns($criteria);
				if (!isset($this->lastKelasJurusanCriteria) || !$this->lastKelasJurusanCriteria->equals($criteria)) {
					$this->collKelasJurusans = KelasJurusanPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastKelasJurusanCriteria = $criteria;
		return $this->collKelasJurusans;
	}

	/**
	 * Returns the number of related KelasJurusan objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related KelasJurusan objects.
	 * @throws     PropelException
	 */
	public function countKelasJurusans(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collKelasJurusans === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(KelasJurusanPeer::KODE_KELAS, $this->kode_kelas);

				$count = KelasJurusanPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(KelasJurusanPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastKelasJurusanCriteria) || !$this->lastKelasJurusanCriteria->equals($criteria)) {
					$count = KelasJurusanPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collKelasJurusans);
				}
			} else {
				$count = count($this->collKelasJurusans);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a KelasJurusan object to this object
	 * through the KelasJurusan foreign key attribute.
	 *
	 * @param      KelasJurusan $l KelasJurusan
	 * @return     void
	 * @throws     PropelException
	 */
	public function addKelasJurusan(KelasJurusan $l)
	{
		if ($this->collKelasJurusans === null) {
			$this->initKelasJurusans();
		}
		if (!in_array($l, $this->collKelasJurusans, true)) { // only add it if the **same** object is not already associated
			array_push($this->collKelasJurusans, $l);
			$l->setKelasMK($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related KelasJurusans from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getKelasJurusansJoinJurusan($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collKelasJurusans === null) {
			if ($this->isNew()) {
				$this->collKelasJurusans = array();
			} else {

				$criteria->add(KelasJurusanPeer::KODE_KELAS, $this->kode_kelas);

				$this->collKelasJurusans = KelasJurusanPeer::doSelectJoinJurusan($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(KelasJurusanPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastKelasJurusanCriteria) || !$this->lastKelasJurusanCriteria->equals($criteria)) {
				$this->collKelasJurusans = KelasJurusanPeer::doSelectJoinJurusan($criteria, $con, $join_behavior);
			}
		}
		$this->lastKelasJurusanCriteria = $criteria;

		return $this->collKelasJurusans;
	}

	/**
	 * Clears out the collSettingNrps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSettingNrps()
	 */
	public function clearSettingNrps()
	{
		$this->collSettingNrps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSettingNrps collection (array).
	 *
	 * By default this just sets the collSettingNrps collection to an empty array (like clearcollSettingNrps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSettingNrps()
	{
		$this->collSettingNrps = array();
	}

	/**
	 * Gets an array of SettingNrp objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related SettingNrps from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SettingNrp[]
	 * @throws     PropelException
	 */
	public function getSettingNrps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSettingNrps === null) {
			if ($this->isNew()) {
			   $this->collSettingNrps = array();
			} else {

				$criteria->add(SettingNrpPeer::KODE_KELAS, $this->kode_kelas);

				SettingNrpPeer::addSelectColumns($criteria);
				$this->collSettingNrps = SettingNrpPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SettingNrpPeer::KODE_KELAS, $this->kode_kelas);

				SettingNrpPeer::addSelectColumns($criteria);
				if (!isset($this->lastSettingNrpCriteria) || !$this->lastSettingNrpCriteria->equals($criteria)) {
					$this->collSettingNrps = SettingNrpPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSettingNrpCriteria = $criteria;
		return $this->collSettingNrps;
	}

	/**
	 * Returns the number of related SettingNrp objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SettingNrp objects.
	 * @throws     PropelException
	 */
	public function countSettingNrps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSettingNrps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SettingNrpPeer::KODE_KELAS, $this->kode_kelas);

				$count = SettingNrpPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SettingNrpPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastSettingNrpCriteria) || !$this->lastSettingNrpCriteria->equals($criteria)) {
					$count = SettingNrpPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSettingNrps);
				}
			} else {
				$count = count($this->collSettingNrps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SettingNrp object to this object
	 * through the SettingNrp foreign key attribute.
	 *
	 * @param      SettingNrp $l SettingNrp
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSettingNrp(SettingNrp $l)
	{
		if ($this->collSettingNrps === null) {
			$this->initSettingNrps();
		}
		if (!in_array($l, $this->collSettingNrps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSettingNrps, $l);
			$l->setKelasMK($this);
		}
	}

	/**
	 * Clears out the collJadwalRuangMks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addJadwalRuangMks()
	 */
	public function clearJadwalRuangMks()
	{
		$this->collJadwalRuangMks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collJadwalRuangMks collection (array).
	 *
	 * By default this just sets the collJadwalRuangMks collection to an empty array (like clearcollJadwalRuangMks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initJadwalRuangMks()
	{
		$this->collJadwalRuangMks = array();
	}

	/**
	 * Gets an array of JadwalRuangMk objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related JadwalRuangMks from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array JadwalRuangMk[]
	 * @throws     PropelException
	 */
	public function getJadwalRuangMks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJadwalRuangMks === null) {
			if ($this->isNew()) {
			   $this->collJadwalRuangMks = array();
			} else {

				$criteria->add(JadwalRuangMkPeer::KODE_KELAS, $this->kode_kelas);

				JadwalRuangMkPeer::addSelectColumns($criteria);
				$this->collJadwalRuangMks = JadwalRuangMkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(JadwalRuangMkPeer::KODE_KELAS, $this->kode_kelas);

				JadwalRuangMkPeer::addSelectColumns($criteria);
				if (!isset($this->lastJadwalRuangMkCriteria) || !$this->lastJadwalRuangMkCriteria->equals($criteria)) {
					$this->collJadwalRuangMks = JadwalRuangMkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastJadwalRuangMkCriteria = $criteria;
		return $this->collJadwalRuangMks;
	}

	/**
	 * Returns the number of related JadwalRuangMk objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related JadwalRuangMk objects.
	 * @throws     PropelException
	 */
	public function countJadwalRuangMks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collJadwalRuangMks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(JadwalRuangMkPeer::KODE_KELAS, $this->kode_kelas);

				$count = JadwalRuangMkPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(JadwalRuangMkPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastJadwalRuangMkCriteria) || !$this->lastJadwalRuangMkCriteria->equals($criteria)) {
					$count = JadwalRuangMkPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collJadwalRuangMks);
				}
			} else {
				$count = count($this->collJadwalRuangMks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a JadwalRuangMk object to this object
	 * through the JadwalRuangMk foreign key attribute.
	 *
	 * @param      JadwalRuangMk $l JadwalRuangMk
	 * @return     void
	 * @throws     PropelException
	 */
	public function addJadwalRuangMk(JadwalRuangMk $l)
	{
		if ($this->collJadwalRuangMks === null) {
			$this->initJadwalRuangMks();
		}
		if (!in_array($l, $this->collJadwalRuangMks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collJadwalRuangMks, $l);
			$l->setKelasMK($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related JadwalRuangMks from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getJadwalRuangMksJoinJadwalRuang($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collJadwalRuangMks === null) {
			if ($this->isNew()) {
				$this->collJadwalRuangMks = array();
			} else {

				$criteria->add(JadwalRuangMkPeer::KODE_KELAS, $this->kode_kelas);

				$this->collJadwalRuangMks = JadwalRuangMkPeer::doSelectJoinJadwalRuang($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(JadwalRuangMkPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastJadwalRuangMkCriteria) || !$this->lastJadwalRuangMkCriteria->equals($criteria)) {
				$this->collJadwalRuangMks = JadwalRuangMkPeer::doSelectJoinJadwalRuang($criteria, $con, $join_behavior);
			}
		}
		$this->lastJadwalRuangMkCriteria = $criteria;

		return $this->collJadwalRuangMks;
	}

	/**
	 * Clears out the collSoalUjians collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSoalUjians()
	 */
	public function clearSoalUjians()
	{
		$this->collSoalUjians = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSoalUjians collection (array).
	 *
	 * By default this just sets the collSoalUjians collection to an empty array (like clearcollSoalUjians());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSoalUjians()
	{
		$this->collSoalUjians = array();
	}

	/**
	 * Gets an array of SoalUjian objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this KelasMK has previously been saved, it will retrieve
	 * related SoalUjians from storage. If this KelasMK is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SoalUjian[]
	 * @throws     PropelException
	 */
	public function getSoalUjians($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSoalUjians === null) {
			if ($this->isNew()) {
			   $this->collSoalUjians = array();
			} else {

				$criteria->add(SoalUjianPeer::KODE_KELAS, $this->kode_kelas);

				SoalUjianPeer::addSelectColumns($criteria);
				$this->collSoalUjians = SoalUjianPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SoalUjianPeer::KODE_KELAS, $this->kode_kelas);

				SoalUjianPeer::addSelectColumns($criteria);
				if (!isset($this->lastSoalUjianCriteria) || !$this->lastSoalUjianCriteria->equals($criteria)) {
					$this->collSoalUjians = SoalUjianPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSoalUjianCriteria = $criteria;
		return $this->collSoalUjians;
	}

	/**
	 * Returns the number of related SoalUjian objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SoalUjian objects.
	 * @throws     PropelException
	 */
	public function countSoalUjians(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSoalUjians === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SoalUjianPeer::KODE_KELAS, $this->kode_kelas);

				$count = SoalUjianPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SoalUjianPeer::KODE_KELAS, $this->kode_kelas);

				if (!isset($this->lastSoalUjianCriteria) || !$this->lastSoalUjianCriteria->equals($criteria)) {
					$count = SoalUjianPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSoalUjians);
				}
			} else {
				$count = count($this->collSoalUjians);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SoalUjian object to this object
	 * through the SoalUjian foreign key attribute.
	 *
	 * @param      SoalUjian $l SoalUjian
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSoalUjian(SoalUjian $l)
	{
		if ($this->collSoalUjians === null) {
			$this->initSoalUjians();
		}
		if (!in_array($l, $this->collSoalUjians, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSoalUjians, $l);
			$l->setKelasMK($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this KelasMK is new, it will return
	 * an empty collection; or if this KelasMK has previously
	 * been saved, it will retrieve related SoalUjians from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in KelasMK.
	 */
	public function getSoalUjiansJoinDosen($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(KelasMKPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSoalUjians === null) {
			if ($this->isNew()) {
				$this->collSoalUjians = array();
			} else {

				$criteria->add(SoalUjianPeer::KODE_KELAS, $this->kode_kelas);

				$this->collSoalUjians = SoalUjianPeer::doSelectJoinDosen($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SoalUjianPeer::KODE_KELAS, $this->kode_kelas);

			if (!isset($this->lastSoalUjianCriteria) || !$this->lastSoalUjianCriteria->equals($criteria)) {
				$this->collSoalUjians = SoalUjianPeer::doSelectJoinDosen($criteria, $con, $join_behavior);
			}
		}
		$this->lastSoalUjianCriteria = $criteria;

		return $this->collSoalUjians;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collDaftarKelass) {
				foreach ((array) $this->collDaftarKelass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDosenKelass) {
				foreach ((array) $this->collDosenKelass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJadwalKuliahs) {
				foreach ((array) $this->collJadwalKuliahs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collKelasJurusans) {
				foreach ((array) $this->collKelasJurusans as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSettingNrps) {
				foreach ((array) $this->collSettingNrps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collJadwalRuangMks) {
				foreach ((array) $this->collJadwalRuangMks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSoalUjians) {
				foreach ((array) $this->collSoalUjians as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collDaftarKelass = null;
		$this->collDosenKelass = null;
		$this->collJadwalKuliahs = null;
		$this->collKelasJurusans = null;
		$this->collSettingNrps = null;
		$this->collJadwalRuangMks = null;
		$this->collSoalUjians = null;
			$this->aMataKuliah = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseKelasMK:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseKelasMK::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseKelasMK

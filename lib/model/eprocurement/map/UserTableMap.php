<?php


/**
 * This class defines the structure of the 'application_user' table.
 *
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Oct 17 01:36:49 2013
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.eprocurement.map
 */
class UserTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.eprocurement.map.UserTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('application_user');
		$this->setPhpName('User');
		$this->setClassname('User');
		$this->setPackage('lib.model.eprocurement');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addForeignKey('PERAN_USER_ID', 'PeranUserId', 'INTEGER', 'peran_user', 'ID', true, null, null);
		$this->addForeignKey('INSTANSI_ID', 'InstansiId', 'INTEGER', 'instansi', 'ID', false, null, null);
		$this->addForeignKey('SATUAN_KERJA_ID', 'SatuanKerjaId', 'INTEGER', 'satuan_kerja', 'ID', false, null, null);
		$this->addColumn('USERNAME', 'Username', 'VARCHAR', true, 64, null);
		$this->addColumn('NAMA', 'Nama', 'VARCHAR', true, 255, null);
		$this->addColumn('DEFAULT_PASSWORD', 'DefaultPassword', 'VARCHAR', false, 255, null);
		$this->addColumn('PASSWORD', 'Password', 'VARCHAR', false, 255, null);
		$this->addColumn('TELEPON', 'Telepon', 'VARCHAR', false, 32, null);
		$this->addColumn('ALAMAT', 'Alamat', 'VARCHAR', false, 255, null);
		$this->addColumn('EMAIL', 'Email', 'VARCHAR', false, 255, null);
		$this->addColumn('PUBLIC_KEY', 'PublicKey', 'LONGVARCHAR', false, 255, null);
		$this->addColumn('DISABLED', 'Disabled', 'BOOLEAN', false, null, null);
		$this->addColumn('ALASAN_DISABLED', 'AlasanDisabled', 'VARCHAR', false, 255, null);
		$this->addColumn('STATE', 'State', 'INTEGER', false, null, 0);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('PeranUser', 'PeranUser', RelationMap::MANY_TO_ONE, array('peran_user_id' => 'id', ), 'RESTRICT', null);
    $this->addRelation('Instansi', 'Instansi', RelationMap::MANY_TO_ONE, array('instansi_id' => 'id', ), 'RESTRICT', null);
    $this->addRelation('SatuanKerja', 'SatuanKerja', RelationMap::MANY_TO_ONE, array('satuan_kerja_id' => 'id', ), 'RESTRICT', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // UserTableMap
